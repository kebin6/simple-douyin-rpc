// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: douyin.proto

package douyin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DouyinClient is the client API for Douyin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DouyinClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// group: dyApi
	// 用于获取JSSDK调起半屏授权页方法需要的签名
	GetSignature(ctx context.Context, in *SignatureReq, opts ...grpc.CallOption) (*SignatureResp, error)
	// group: dyApi
	// 获取抖音AccessToken
	GetAccessToken(ctx context.Context, in *AccessTokenReq, opts ...grpc.CallOption) (*AccessTokenResp, error)
}

type douyinClient struct {
	cc grpc.ClientConnInterface
}

func NewDouyinClient(cc grpc.ClientConnInterface) DouyinClient {
	return &douyinClient{cc}
}

func (c *douyinClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/douyin.Douyin/initDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinClient) GetSignature(ctx context.Context, in *SignatureReq, opts ...grpc.CallOption) (*SignatureResp, error) {
	out := new(SignatureResp)
	err := c.cc.Invoke(ctx, "/douyin.Douyin/GetSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinClient) GetAccessToken(ctx context.Context, in *AccessTokenReq, opts ...grpc.CallOption) (*AccessTokenResp, error) {
	out := new(AccessTokenResp)
	err := c.cc.Invoke(ctx, "/douyin.Douyin/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DouyinServer is the server API for Douyin service.
// All implementations must embed UnimplementedDouyinServer
// for forward compatibility
type DouyinServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// group: dyApi
	// 用于获取JSSDK调起半屏授权页方法需要的签名
	GetSignature(context.Context, *SignatureReq) (*SignatureResp, error)
	// group: dyApi
	// 获取抖音AccessToken
	GetAccessToken(context.Context, *AccessTokenReq) (*AccessTokenResp, error)
	mustEmbedUnimplementedDouyinServer()
}

// UnimplementedDouyinServer must be embedded to have forward compatible implementations.
type UnimplementedDouyinServer struct {
}

func (UnimplementedDouyinServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedDouyinServer) GetSignature(context.Context, *SignatureReq) (*SignatureResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignature not implemented")
}
func (UnimplementedDouyinServer) GetAccessToken(context.Context, *AccessTokenReq) (*AccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedDouyinServer) mustEmbedUnimplementedDouyinServer() {}

// UnsafeDouyinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DouyinServer will
// result in compilation errors.
type UnsafeDouyinServer interface {
	mustEmbedUnimplementedDouyinServer()
}

func RegisterDouyinServer(s grpc.ServiceRegistrar, srv DouyinServer) {
	s.RegisterService(&Douyin_ServiceDesc, srv)
}

func _Douyin_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.Douyin/initDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Douyin_GetSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinServer).GetSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.Douyin/GetSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinServer).GetSignature(ctx, req.(*SignatureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Douyin_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.Douyin/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinServer).GetAccessToken(ctx, req.(*AccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Douyin_ServiceDesc is the grpc.ServiceDesc for Douyin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Douyin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.Douyin",
	HandlerType: (*DouyinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Douyin_InitDatabase_Handler,
		},
		{
			MethodName: "GetSignature",
			Handler:    _Douyin_GetSignature_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _Douyin_GetAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "douyin.proto",
}
